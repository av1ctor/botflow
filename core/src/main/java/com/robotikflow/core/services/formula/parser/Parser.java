
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.robotikflow.core.services.formula.parser;

import java_cup.runtime.XMLElement;
import com.robotikflow.core.services.formula.eval.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\004\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\003\000\002\006\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\012" +
    "\002\000\002\012\003\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\010\010\000\002\010\010\000" +
    "\002\007\005\000\002\011\006\000\002\011\006\000\002" +
    "\014\003\000\002\014\003\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\016\003\000\002\016\004" +
    "\000\002\017\003\000\002\017\005\000\002\020\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\022" +
    "\003\000\002\022\005\000\002\022\005\000\002\023\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\024\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\025\003\000\002\025" +
    "\005\000\002\026\003\000\002\026\005\000\002\027\003" +
    "\000\002\027\005\000\002\030\003\000\002\030\005\000" +
    "\002\031\003\000\002\031\007\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\026\015\016\020\010\021\031\022\012\043" +
    "\026\044\023\045\004\046\006\047\013\050\033\001\002" +
    "\000\072\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\001\002\000\072\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\014\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\021\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\001\002\000\072\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\014\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\001\002\000\022" +
    "\002\uffc4\005\uffc4\007\uffc4\011\uffc4\016\uffc4\017\uffc4\041" +
    "\145\042\146\001\002\000\026\015\016\020\010\021\031" +
    "\022\012\043\026\044\023\045\004\046\006\047\013\050" +
    "\033\001\002\000\072\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\014\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\001\002\000\026" +
    "\015\016\020\010\021\031\022\012\043\026\044\023\045" +
    "\004\046\006\047\013\050\033\001\002\000\072\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\014" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\001\002\000\072\002\000\004\000\005\000\006" +
    "\000\007\000\010\000\011\000\014\000\016\000\017\000" +
    "\020\000\021\000\023\000\024\000\025\000\026\000\027" +
    "\000\030\000\031\000\032\000\033\000\034\000\035\000" +
    "\036\000\037\000\040\000\041\000\042\000\001\002\000" +
    "\056\002\uffd8\005\uffd8\007\uffd8\011\uffd8\014\uffd8\016\uffd8" +
    "\017\uffd8\020\066\021\067\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\001\002\000\026\015\016\020" +
    "\010\021\031\022\012\043\026\044\023\045\004\046\006" +
    "\047\013\050\033\001\002\000\064\002\uffdb\005\uffdb\007" +
    "\uffdb\010\072\011\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\023\073\024\071\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\001\002\000\066\002\uffe4\005" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\014\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\001\002\000" +
    "\066\002\uffe1\005\uffe1\007\uffe1\010\uffe1\011\uffe1\014\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\001\002\000\004\002\140\001\002\000\072\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\014" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\001\002\000\024\002\uffc6\005\uffc6\007\uffc6\011" +
    "\uffc6\016\uffc6\017\uffc6\040\136\041\uffc6\042\uffc6\001\002" +
    "\000\066\002\uffdf\005\uffdf\007\uffdf\010\uffdf\011\uffdf\014" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf" +
    "\025\075\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\001\002\000\072\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\014\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\001\002\000" +
    "\072\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\014\uffff\016\uffff\017\uffff\020\uffff\021\uffff\023" +
    "\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff" +
    "\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040" +
    "\uffff\041\uffff\042\uffff\001\002\000\072\002\uffe8\004\126" +
    "\005\uffe8\006\127\007\uffe8\010\uffe8\011\uffe8\014\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\001\002\000\026\015\016\020\010\021\031\022\012\043" +
    "\026\044\023\045\004\046\006\047\013\050\033\001\002" +
    "\000\072\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\014\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\001\002\000\072\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\001\002\000\030\002\uffca\005\uffca\007\uffca\011\uffca" +
    "\016\uffca\017\uffca\036\105\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\001\002\000\072\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\014\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\001\002\000\036" +
    "\002\uffcc\005\uffcc\007\uffcc\011\uffcc\014\107\016\uffcc\017" +
    "\uffcc\034\111\035\110\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\001\002\000\046\002\uffd0\005\uffd0\007\uffd0\011" +
    "\uffd0\014\uffd0\016\uffd0\017\uffd0\030\113\031\115\032\116" +
    "\033\114\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\001\002\000\016\002\uffc2\005\uffc2\007\uffc2" +
    "\011\uffc2\016\uffc2\017\uffc2\001\002\000\026\002\uffc8\005" +
    "\uffc8\007\uffc8\011\uffc8\016\uffc8\017\uffc8\037\103\040\uffc8" +
    "\041\uffc8\042\uffc8\001\002\000\052\002\uffd5\005\uffd5\007" +
    "\uffd5\011\uffd5\014\uffd5\016\uffd5\017\uffd5\026\063\027\064" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\001\002\000\066" +
    "\002\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3\014\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\001\002\000\072\002\uffe7\004\045\005\uffe7\006\046\007" +
    "\uffe7\010\uffe7\011\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000\026\015" +
    "\016\020\010\021\031\022\012\043\026\044\023\045\004" +
    "\046\006\047\013\050\033\001\002\000\004\047\047\001" +
    "\002\000\074\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\014\ufffd\015\050\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\001\002\000\030" +
    "\015\016\016\ufff2\020\010\021\031\022\012\043\026\044" +
    "\023\045\004\046\006\047\013\050\033\001\002\000\004" +
    "\016\060\001\002\000\010\007\ufff0\011\ufff0\016\ufff0\001" +
    "\002\000\010\007\055\011\054\016\ufff1\001\002\000\026" +
    "\015\016\020\010\021\031\022\012\043\026\044\023\045" +
    "\004\046\006\047\013\050\033\001\002\000\026\015\016" +
    "\020\010\021\031\022\012\043\026\044\023\045\004\046" +
    "\006\047\013\050\033\001\002\000\010\007\uffee\011\uffee" +
    "\016\uffee\001\002\000\010\007\uffef\011\uffef\016\uffef\001" +
    "\002\000\072\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\014\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\001\002\000\004\005\062" +
    "\001\002\000\072\002\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\014\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\001\002\000\026\015" +
    "\016\020\010\021\031\022\012\043\026\044\023\045\004" +
    "\046\006\047\013\050\033\001\002\000\026\015\016\020" +
    "\010\021\031\022\012\043\026\044\023\045\004\046\006" +
    "\047\013\050\033\001\002\000\056\002\uffd6\005\uffd6\007" +
    "\uffd6\011\uffd6\014\uffd6\016\uffd6\017\uffd6\020\066\021\067" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\001\002\000\026\015\016\020\010\021\031\022\012\043" +
    "\026\044\023\045\004\046\006\047\013\050\033\001\002" +
    "\000\026\015\016\020\010\021\031\022\012\043\026\044" +
    "\023\045\004\046\006\047\013\050\033\001\002\000\064" +
    "\002\uffd9\005\uffd9\007\uffd9\010\072\011\uffd9\014\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\023\073\024\071\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\001\002" +
    "\000\026\015\016\020\010\021\031\022\012\043\026\044" +
    "\023\045\004\046\006\047\013\050\033\001\002\000\026" +
    "\015\016\020\010\021\031\022\012\043\026\044\023\045" +
    "\004\046\006\047\013\050\033\001\002\000\026\015\016" +
    "\020\010\021\031\022\012\043\026\044\023\045\004\046" +
    "\006\047\013\050\033\001\002\000\066\002\uffdd\005\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\014\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\023\uffdd\024\uffdd\025\075\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\001\002\000\026" +
    "\015\016\020\010\021\031\022\012\043\026\044\023\045" +
    "\004\046\006\047\013\050\033\001\002\000\066\002\uffe0" +
    "\005\uffe0\007\uffe0\010\uffe0\011\uffe0\014\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\001\002" +
    "\000\066\002\uffde\005\uffde\007\uffde\010\uffde\011\uffde\014" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\024\uffde" +
    "\025\075\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\001\002\000\066\002\uffdc\005\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\023\uffdc\024\uffdc\025\075\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\001\002\000\064\002\uffda\005" +
    "\uffda\007\uffda\010\072\011\uffda\014\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\023\073\024\071\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\001\002\000\056\002" +
    "\uffd7\005\uffd7\007\uffd7\011\uffd7\014\uffd7\016\uffd7\017\uffd7" +
    "\020\066\021\067\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\001\002\000\026\015\016\020\010\021" +
    "\031\022\012\043\026\044\023\045\004\046\006\047\013" +
    "\050\033\001\002\000\030\002\uffc9\005\uffc9\007\uffc9\011" +
    "\uffc9\016\uffc9\017\uffc9\036\105\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\001\002\000\026\015\016\020\010\021\031\022" +
    "\012\043\026\044\023\045\004\046\006\047\013\050\033" +
    "\001\002\000\036\002\uffcb\005\uffcb\007\uffcb\011\uffcb\014" +
    "\107\016\uffcb\017\uffcb\034\111\035\110\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\001\002\000\026\015\016\020" +
    "\010\021\031\022\012\043\026\044\023\045\004\046\006" +
    "\047\013\050\033\001\002\000\026\015\016\020\010\021" +
    "\031\022\012\043\026\044\023\045\004\046\006\047\013" +
    "\050\033\001\002\000\026\015\016\020\010\021\031\022" +
    "\012\043\026\044\023\045\004\046\006\047\013\050\033" +
    "\001\002\000\046\002\uffce\005\uffce\007\uffce\011\uffce\014" +
    "\uffce\016\uffce\017\uffce\030\113\031\115\032\116\033\114" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\001\002\000\026\015\016\020\010\021\031\022\012" +
    "\043\026\044\023\045\004\046\006\047\013\050\033\001" +
    "\002\000\026\015\016\020\010\021\031\022\012\043\026" +
    "\044\023\045\004\046\006\047\013\050\033\001\002\000" +
    "\026\015\016\020\010\021\031\022\012\043\026\044\023" +
    "\045\004\046\006\047\013\050\033\001\002\000\026\015" +
    "\016\020\010\021\031\022\012\043\026\044\023\045\004" +
    "\046\006\047\013\050\033\001\002\000\052\002\uffd2\005" +
    "\uffd2\007\uffd2\011\uffd2\014\uffd2\016\uffd2\017\uffd2\026\063" +
    "\027\064\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002" +
    "\000\052\002\uffd3\005\uffd3\007\uffd3\011\uffd3\014\uffd3\016" +
    "\uffd3\017\uffd3\026\063\027\064\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\001\002\000\052\002\uffd1\005\uffd1\007\uffd1" +
    "\011\uffd1\014\uffd1\016\uffd1\017\uffd1\026\063\027\064\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\001\002\000\052\002" +
    "\uffd4\005\uffd4\007\uffd4\011\uffd4\014\uffd4\016\uffd4\017\uffd4" +
    "\026\063\027\064\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\001\002\000\046\002\uffcd\005\uffcd\007\uffcd\011\uffcd\014" +
    "\uffcd\016\uffcd\017\uffcd\030\113\031\115\032\116\033\114" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\001\002\000\046\002\uffcf\005\uffcf\007\uffcf\011\uffcf" +
    "\014\uffcf\016\uffcf\017\uffcf\030\113\031\115\032\116\033" +
    "\114\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\001\002\000\066\002\uffe5\005\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\001\002\000\026\015\016\020" +
    "\010\021\031\022\012\043\026\044\023\045\004\046\006" +
    "\047\013\050\033\001\002\000\004\047\130\001\002\000" +
    "\074\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\014\uffeb\015\131\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\001\002\000\030\015\016" +
    "\016\ufff2\020\010\021\031\022\012\043\026\044\023\045" +
    "\004\046\006\047\013\050\033\001\002\000\004\016\133" +
    "\001\002\000\072\002\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\014\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\001\002\000\004\005" +
    "\135\001\002\000\072\002\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\014\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\001\002\000\026" +
    "\015\016\020\010\021\031\022\012\043\026\044\023\045" +
    "\004\046\006\047\013\050\033\001\002\000\026\002\uffc7" +
    "\005\uffc7\007\uffc7\011\uffc7\016\uffc7\017\uffc7\037\103\040" +
    "\uffc7\041\uffc7\042\uffc7\001\002\000\004\002\001\001\002" +
    "\000\004\016\142\001\002\000\072\002\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\014\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\001" +
    "\002\000\066\002\uffe2\005\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\014\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\001\002\000\066\002\uffe6\005\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002\000\026\015\016" +
    "\020\010\021\031\022\012\043\026\044\023\045\004\046" +
    "\006\047\013\050\033\001\002\000\026\015\016\020\010" +
    "\021\031\022\012\043\026\044\023\045\004\046\006\047" +
    "\013\050\033\001\002\000\004\017\150\001\002\000\026" +
    "\015\016\020\010\021\031\022\012\043\026\044\023\045" +
    "\004\046\006\047\013\050\033\001\002\000\016\002\uffc3" +
    "\005\uffc3\007\uffc3\011\uffc3\016\uffc3\017\uffc3\001\002\000" +
    "\024\002\uffc5\005\uffc5\007\uffc5\011\uffc5\016\uffc5\017\uffc5" +
    "\040\136\041\uffc5\042\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\060\002\043\003\013\004\026\005\031\006" +
    "\027\007\004\010\010\011\034\014\042\015\020\016\017" +
    "\017\024\020\016\021\014\022\041\023\036\024\035\025" +
    "\033\026\040\027\023\030\006\031\037\032\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\043\003\013\004\026\005\031" +
    "\006\027\007\004\010\010\011\034\014\042\015\143\016" +
    "\017\001\001\000\002\001\001\000\030\002\043\003\013" +
    "\004\026\005\031\006\027\007\004\010\010\011\034\014" +
    "\042\015\142\016\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\002\043\003\013\004" +
    "\026\005\031\006\027\007\004\010\010\011\034\014\042" +
    "\015\020\016\017\017\024\020\016\021\014\022\041\023" +
    "\036\024\035\025\033\026\040\027\023\030\006\031\037" +
    "\032\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\043\003\013\004\026" +
    "\005\031\006\027\007\004\010\010\011\034\014\042\015" +
    "\124\016\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\002" +
    "\043\003\013\004\026\005\031\006\027\007\004\010\010" +
    "\011\034\014\042\015\020\016\017\017\024\020\016\021" +
    "\014\022\041\023\036\024\035\025\033\026\040\027\023" +
    "\030\006\031\037\032\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\002\043\003\013\004\026\005\031" +
    "\006\027\007\004\010\010\011\034\012\050\013\052\014" +
    "\042\015\020\016\017\017\024\020\016\021\014\022\041" +
    "\023\036\024\035\025\033\026\040\027\023\030\006\031" +
    "\037\032\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\002\043\003\013\004\026\005" +
    "\031\006\027\007\004\010\010\011\034\014\042\015\020" +
    "\016\017\017\024\020\016\021\014\022\041\023\036\024" +
    "\035\025\033\026\040\027\023\030\006\031\037\032\056" +
    "\001\001\000\060\002\043\003\013\004\026\005\031\006" +
    "\027\007\004\010\010\011\034\014\042\015\020\016\017" +
    "\017\024\020\016\021\014\022\041\023\036\024\035\025" +
    "\033\026\040\027\023\030\006\031\037\032\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\002\043\003\013" +
    "\004\026\005\031\006\027\007\004\010\010\011\034\014" +
    "\042\015\020\016\017\017\024\020\016\021\101\001\001" +
    "\000\036\002\043\003\013\004\026\005\031\006\027\007" +
    "\004\010\010\011\034\014\042\015\020\016\017\017\024" +
    "\020\016\021\064\001\001\000\002\001\001\000\034\002" +
    "\043\003\013\004\026\005\031\006\027\007\004\010\010" +
    "\011\034\014\042\015\020\016\017\017\024\020\100\001" +
    "\001\000\034\002\043\003\013\004\026\005\031\006\027" +
    "\007\004\010\010\011\034\014\042\015\020\016\017\017" +
    "\024\020\067\001\001\000\002\001\001\000\032\002\043" +
    "\003\013\004\026\005\031\006\027\007\004\010\010\011" +
    "\034\014\042\015\020\016\017\017\077\001\001\000\032" +
    "\002\043\003\013\004\026\005\031\006\027\007\004\010" +
    "\010\011\034\014\042\015\020\016\017\017\076\001\001" +
    "\000\032\002\043\003\013\004\026\005\031\006\027\007" +
    "\004\010\010\011\034\014\042\015\020\016\017\017\073" +
    "\001\001\000\002\001\001\000\030\002\043\003\013\004" +
    "\026\005\031\006\027\007\004\010\010\011\034\014\042" +
    "\015\075\016\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\002\043\003\013\004\026\005\031\006\027\007" +
    "\004\010\010\011\034\014\042\015\020\016\017\017\024" +
    "\020\016\021\014\022\041\023\036\024\035\025\103\001" +
    "\001\000\002\001\001\000\044\002\043\003\013\004\026" +
    "\005\031\006\027\007\004\010\010\011\034\014\042\015" +
    "\020\016\017\017\024\020\016\021\014\022\041\023\036" +
    "\024\105\001\001\000\002\001\001\000\042\002\043\003" +
    "\013\004\026\005\031\006\027\007\004\010\010\011\034" +
    "\014\042\015\020\016\017\017\024\020\016\021\014\022" +
    "\041\023\123\001\001\000\042\002\043\003\013\004\026" +
    "\005\031\006\027\007\004\010\010\011\034\014\042\015" +
    "\020\016\017\017\024\020\016\021\014\022\041\023\122" +
    "\001\001\000\042\002\043\003\013\004\026\005\031\006" +
    "\027\007\004\010\010\011\034\014\042\015\020\016\017" +
    "\017\024\020\016\021\014\022\041\023\111\001\001\000" +
    "\002\001\001\000\040\002\043\003\013\004\026\005\031" +
    "\006\027\007\004\010\010\011\034\014\042\015\020\016" +
    "\017\017\024\020\016\021\014\022\121\001\001\000\040" +
    "\002\043\003\013\004\026\005\031\006\027\007\004\010" +
    "\010\011\034\014\042\015\020\016\017\017\024\020\016" +
    "\021\014\022\120\001\001\000\040\002\043\003\013\004" +
    "\026\005\031\006\027\007\004\010\010\011\034\014\042" +
    "\015\020\016\017\017\024\020\016\021\014\022\117\001" +
    "\001\000\040\002\043\003\013\004\026\005\031\006\027" +
    "\007\004\010\010\011\034\014\042\015\020\016\017\017" +
    "\024\020\016\021\014\022\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\002\043\003\013\004\026\005\031\006\027\007\004\010" +
    "\010\011\034\014\042\015\020\016\017\017\024\020\016" +
    "\021\014\022\041\023\036\024\035\025\033\026\040\027" +
    "\023\030\006\031\037\032\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\002\043\003\013\004\026\005" +
    "\031\006\027\007\004\010\010\011\034\012\131\013\052" +
    "\014\042\015\020\016\017\017\024\020\016\021\014\022" +
    "\041\023\036\024\035\025\033\026\040\027\023\030\006" +
    "\031\037\032\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\002\043" +
    "\003\013\004\026\005\031\006\027\007\004\010\010\011" +
    "\034\014\042\015\020\016\017\017\024\020\016\021\014" +
    "\022\041\023\036\024\035\025\033\026\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\002" +
    "\043\003\013\004\026\005\031\006\027\007\004\010\010" +
    "\011\034\014\042\015\020\016\017\017\024\020\016\021" +
    "\014\022\041\023\036\024\035\025\033\026\040\027\151" +
    "\001\001\000\060\002\043\003\013\004\026\005\031\006" +
    "\027\007\004\010\010\011\034\014\042\015\020\016\017" +
    "\017\024\020\016\021\014\022\041\023\036\024\035\025" +
    "\033\026\040\027\023\030\006\031\037\032\146\001\001" +
    "\000\002\001\001\000\056\002\043\003\013\004\026\005" +
    "\031\006\027\007\004\010\010\011\034\014\042\015\020" +
    "\016\017\017\024\020\016\021\014\022\041\023\036\024" +
    "\035\025\033\026\040\027\023\030\006\031\150\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expression EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstBase start_val = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // name ::= simple_name 
            {
              AstBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase s = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // name ::= qualified_name 
            {
              AstBase RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase q = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = q; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // simple_name ::= IDENTIFIER 
            {
              AstBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstVariable(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_name",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // qualified_name ::= name DOT IDENTIFIER 
            {
              AstBase RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase n = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstField(n, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("qualified_name",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal ::= INTEGER_LIT 
            {
              AstBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number i = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstIntegerLit(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= FLOATING_POINT_LIT 
            {
              AstBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number f = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstDecimalLit(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal ::= BOOLEAN_LIT 
            {
              AstBase RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Boolean b = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstBooleanLit(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literal ::= STRING_LIT 
            {
              AstBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstStringLit(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literal ::= NULL_LIT 
            {
              AstBase RESULT =null;
		 RESULT = new AstNullLit(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primary ::= literal 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // primary ::= LPAREN expression RPAREN 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // primary ::= method_invocation 
            {
              AstBase RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase m = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // primary ::= primary_field_access 
            {
              AstBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase f = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // primary ::= array_access 
            {
              AstBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase a = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argument_list_opt ::= 
            {
              AstBase RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argument_list_opt ::= argument_list 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argument_list ::= expression 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstArg(e);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argument_list ::= argument_list COMMA expression 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstArg((AstArg)l, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argument_list ::= argument_list SEMICOLON expression 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstArg((AstArg)l, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_invocation ::= name DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              AstBase RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AstBase n = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AstFunction(n, i, (AstArg)l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_invocation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_invocation ::= primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              AstBase RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AstBase p = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AstFunction(p, i, (AstArg)l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_invocation",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // primary_field_access ::= primary DOT IDENTIFIER 
            {
              AstBase RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase p = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstField(p, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_field_access",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // array_access ::= name LBRACK expression RBRACK 
            {
              AstBase RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AstBase n = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AstIndexing(e, n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_access",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // array_access ::= primary LBRACK expression RBRACK 
            {
              AstBase RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AstBase p = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AstIndexing(e, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_access",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // postfix_expr ::= primary 
            {
              AstBase RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase p = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // postfix_expr ::= name 
            {
              AstBase RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase n = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unary_expr ::= PLUS unary_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstUop(Operator.ADD, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unary_expr ::= MINUS unary_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstUop(Operator.SUB, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unary_expr ::= unary_expr_not_plus_minus 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unary_expr_not_plus_minus ::= postfix_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr_not_plus_minus",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unary_expr_not_plus_minus ::= NOT unary_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstUop(Operator.NOT, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr_not_plus_minus",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pow_expr ::= unary_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pow_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pow_expr ::= pow_expr POW unary_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstMultOp(Operator.POW, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pow_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // multiplicative_expr ::= pow_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // multiplicative_expr ::= multiplicative_expr MULT pow_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstMultOp(Operator.MULT, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // multiplicative_expr ::= multiplicative_expr DIV pow_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstMultOp(Operator.DIV, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // multiplicative_expr ::= multiplicative_expr MOD pow_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstMultOp(Operator.MOD, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // additive_expr ::= multiplicative_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // additive_expr ::= additive_expr PLUS multiplicative_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstAddOp(Operator.ADD, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // additive_expr ::= additive_expr MINUS multiplicative_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstAddOp(Operator.SUB, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // shift_expr ::= additive_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // shift_expr ::= shift_expr LSHIFT additive_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstMultOp(Operator.SHL, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // shift_expr ::= shift_expr RSHIFT additive_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstMultOp(Operator.SHR, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relational_expr ::= shift_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relational_expr ::= relational_expr LT shift_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstRelatOp(Operator.LT, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relational_expr ::= relational_expr GT shift_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstRelatOp(Operator.GT, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relational_expr ::= relational_expr LTEQ shift_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstRelatOp(Operator.LE, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relational_expr ::= relational_expr GTEQ shift_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstRelatOp(Operator.GE, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // equality_expr ::= relational_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // equality_expr ::= equality_expr EQ relational_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstRelatOp(Operator.EQ, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // equality_expr ::= equality_expr EQEQ relational_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstRelatOp(Operator.EQ, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // equality_expr ::= equality_expr NOTEQ relational_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstRelatOp(Operator.NE, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // and_expr ::= equality_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // and_expr ::= and_expr AND equality_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstAddOp(Operator.AND, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inclusive_or_expr ::= and_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inclusive_or_expr ::= inclusive_or_expr OR and_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstAddOp(Operator.OR, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conditional_and_expr ::= inclusive_or_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conditional_and_expr ::= conditional_and_expr ANDAND inclusive_or_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstCondOp(Operator.LAND, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_and_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // conditional_or_expr ::= conditional_and_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conditional_or_expr ::= conditional_or_expr OROR conditional_and_expr 
            {
              AstBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase l = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase r = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstCondOp(Operator.LOR, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_or_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conditional_expr ::= conditional_or_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conditional_expr ::= conditional_or_expr QUESTION expression COLON conditional_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstBase t = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase f = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstConditional(e, t, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= conditional_expr 
            {
              AstBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstBase e = (AstBase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AstExpression(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
